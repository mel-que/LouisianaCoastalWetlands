/*****************************************************************************************************************
 *      CREATE IMAGE COLLECTION FROM FRACTIONS RASTERS IN LEGACY ASSETS
 *****************************************************************************************************************/

var assets = ee.data.getList({id:'users/name/folder’});
//print('assets',assets);

var assetsList = ee.List(assets.map(function(asset) {
  return ee.String(asset.id);
}));

var assetID = assetsList.filter(ee.Filter.stringStartsWith('item','users/name/folder/Fraction_'));

var assetstring = assetID.getInfo();

// Save into image collection
var fractCollection = ee.ImageCollection(assetstring);
var sizeCol = fractCollection.size();

for (var s = 0; s < sizeCol.getInfo(); ++s) {
  var currfract = ee.Image(fractCollection.toList(sizeCol).get(s));
  var fractname = currfract.get('name');

  // Define the export parameters
  var exportParams = {
    image: currfract,
    description: fractname.getInfo(),  // Set the image name based on the 'year' property
    folder: ‘Folder’,  // Set the folder where the images will be exported
    scale: 30,  // Set the export scale (e.g., 30 meters per pixel)
    region: geometry,  // Set the export region to the image geometry
    fileFormat: 'GeoTIFF',
    crs: 'EPSG:4326',
    maxPixels: 3784216672400,
  };

  // Export the image
  Export.image.toDrive(exportParams);
}


// #EXTRACT MAJORITY LAND PIXELS
// Define a function to extract pixels with values => 0.75
var extractPixels = function(image) {
  return image.updateMask(image.select('b1').gte(0.7449)); //0.7449 round to 0.745 round to 0.75
};
  //Band 1: Land
  //Band 2: FAV
  //Band 3: SAV
  //Band 4: Water

// Loop through the image list and apply the extraction function. 
// # landPixCollection is collection with pixels that identify as land #
var landPixCollection = fractCollection.map(function(image) {
  return extractPixels(image);
});

/****************************************************
 *      CONSOLIDATE LANDSAT COLLECTION
 ****************************************************/
 
// ############################  COMBINE LANDSATS   ####################################################
 // Build merged image collection called 'landsat'
// select bands from each collection
var ls4sr = ee.ImageCollection("LANDSAT/LT04/C02/T1_L2").select(['SR_B1','SR_B2','SR_B3','SR_B4','SR_B5','SR_B7','ST_B6','QA_PIXEL','QA_RADSAT']);
var ls5sr = ee.ImageCollection("LANDSAT/LT05/C02/T1_L2").select(['SR_B1','SR_B2','SR_B3','SR_B4','SR_B5','SR_B7','ST_B6','QA_PIXEL','QA_RADSAT']);
var ls8sr = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2").select(['SR_B2','SR_B3','SR_B4','SR_B5','SR_B6','SR_B7','ST_B10','QA_PIXEL','QA_RADSAT']);

// merge all collections and rename bands
var landsat = ls4sr.merge(ls5sr).merge(ls8sr).map(function(x){
      return x.rename(['SR_Bb','SR_Bg','SR_Br','SR_Bnir','SR_Bswir1','SR_Bswir2','ST_Btemp','QA_PIXEL','QA_RADSAT']);
  });

function scale(image) {
  // Apply the scaling factors to the appropriate bands.
  var opticalBands = image.select('SR_B.*').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  // Replace the original bands with the scaled ones and apply the masks.
  return image.addBands(opticalBands, null, true)
    .addBands(thermalBands, null, true)
}

// Function to cloud mask from the pixel_qa band of Landsat 8 SR data.
function cloudmask(image) {
  // Bit 0 - Fill
  // Bit 1 - Dilated Cloud
  // Bit 2 - Cirrus
  // Bit 3 - Cloud
  // Bit 4 - Cloud Shadow
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Replace the original bands with the scaled ones and apply the masks.
  return image.updateMask(qaMask)
    .updateMask(saturationMask);
}

// Functions to add NDWI and NDVI, EVI, SAVI (low, intermediate, high density), & TVI
function addIndices(image) {
  // Return and add the image with the added bands.
  var ndvi = image.normalizedDifference(['SR_Bnir','SR_Br']).rename('NDVI') //NDVI = (NIR-RED)/(NIR+RED)

  var evi = image.expression(
      '2.5 * ((NIR - RED) / (NIR + (6 * RED) - (7.5 * BLUE) + 1))', {
        'NIR': image.select('SR_Bnir'),
        'RED': image.select('SR_Br'),
        'BLUE': image.select('SR_Bb')
  }).rename('EVI');

//SAVI range: -1 to 1
  var saviL = image.expression(
    '2*((NIR - RED)/(NIR + RED + 1))', {
      'NIR': image.select('SR_Bnir'),
      'RED': image.select('SR_Br')
  }).rename('SAVI_L'); //(1+L)*((NIR-RED)/(NIR+RED+L)); L = 1 (low density)
  
  var saviM = image.expression(
    '1.5*((NIR - RED)/(NIR + RED + 0.5))', {
      'NIR': image.select('SR_Bnir'),
      'RED': image.select('SR_Br')
  }).rename('SAVI_M'); // L = 0.5 (intermediate)
  
  var saviH = image.expression(
    '1.25*((NIR - RED)/(NIR + RED + 0.25))', {
      'NIR': image.select('SR_Bnir'),
      'RED': image.select('SR_Br')
  }).rename('SAVI_H'); // L = 0.25 (high)

  return image.addBands(ndvi).addBands(evi).addBands(saviL).addBands(saviM).addBands(saviH)
}

// Filter image collection to Louisiana Coast
var lsCollection = landsat
  .filterBounds(geometry)
  .filterDate('2000','2021') //(inclusive, exclusive)
  .map(scale) // optical & thermal scale function
  .map(addIndices) // all vegetation indices
  .map(cloudmask) // cloud mask function

// ####################### CREATE REDUCED LAYERS (MEDIAN, P25, P75) ###########################
// 2020pre is all of 2020
var yrlist = ee.List.sequence({start:2000, end:2020, step:1}).remove(2012)
var yr = yrlist.getInfo();

var yrTotal = yrlist.size().getInfo();

// Get images for each year and find median value for each pixel
function calcMedian(startYear, endYear, curryr) {
  // Bands of interest
  var bands = ["NDVI", "EVI", "EVI2", "SAVI_L", "SAVI_M", "SAVI_H", "TVI"];
  // Filter the collection for the specified year range.
  var yrCollection = lsCollection.filterDate(startYear, endYear).select(bands);

  // Calculate the median for each pixel.
  var medianImage = yrCollection.reduce(ee.Reducer.median());
  var p25 = yrCollection.reduce(ee.Reducer.percentile([25]));
  var p75 = yrCollection.reduce(ee.Reducer.percentile([75]));

  var med2575 = medianImage.addBands(p25).addBands(p75).set('year',curryr);
  // Return the median image with the year as a property.
  return med2575;
}

// Created blank collection where images containing the year's median pixel values are stored
var medianCollection = ee.ImageCollection([]); 

// For loop to get year's median pixels and store in medianCollection
for (var y = 0; y < yrTotal; ++y) {
  var curryr = String(yr[y]);
  if (curryr == '2005') {
    var postStart = '2005-08-29';
    var postEnd = '2006-08-29';
    var postcurryr = curryr + 'post'
    
    var preStart = '2004-08-29'
    var preEnd = '2005-08-29'
    var precurryr = curryr + 'pre'
    // Special handling for 2005 (use specific dates that overlap with the previous year).
    medianCollection = medianCollection.merge(calcMedian(postStart, postEnd, postcurryr));
    medianCollection = medianCollection.merge(calcMedian(preStart, preEnd, precurryr));
  } else if (curryr == '2008') {
      var postStart = '2008-08-31';
      var postEnd = '2009-08-31';
      var postcurryr = curryr + 'post'
      
      var preStart = '2007-08-31'
      var preEnd = '2008-08-31'
      var precurryr = curryr + 'pre'

    // Special handling for 2008 (use specific dates that overlap with the previous year).
    medianCollection = medianCollection.merge(calcMedian(postStart, postEnd, postcurryr));
    medianCollection = medianCollection.merge(calcMedian(preStart, preEnd, precurryr));
  } else { //all other
      var start = curryr + '-01-01';
      var end = curryr + '-12-31';
  medianCollection = medianCollection.merge(calcMedian(start, end, curryr));
  }
}

// ### medCollection is masked ImageCollection such that only pixels corresponding to a land fraction >= 0.75 is shown
var medCollection = ee.ImageCollection([]); //blank medCollection created
var count = landPixCollection.size().getInfo(); //number of images in land fraction collection

for (var m = 0; m < count; ++m) {
  var count1 = landPixCollection.size();
  var count2 = medianCollection.size();
  var fractim = ee.Image(landPixCollection.toList(count1).get(m)); // get current land fract image
  var medim = ee.Image(medianCollection.toList(count2).get(m)); //get current median pix image
  var yrmask = fractim.select('b1'); //.gte(0.7449);  //0.7449 round to 0.745 round to 0.75
  var medianmask = medim.updateMask(yrmask);
  var medCollection = medCollection.merge(medianmask);
}

print('medCollection',medCollection)